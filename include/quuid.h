/****************************************************************************
 ** $Id:  qt/quuid.h   3.0.0   edited Sep 20 19:46 $
 **
 ** Definition of QLibrary class
 **
 ** Created : 2000-01-01
 **
 ** Copyright (C) 2000 Trolltech AS.  All rights reserved.
 **
 ** This file is part of the kernel module of the Qt GUI Toolkit.
 **
 ** This file may be distributed under the terms of the Q Public License
 ** as defined by Trolltech AS of Norway and appearing in the file
 ** LICENSE.QPL included in the packaging of this file.
 **
 ** This file may be distributed and/or modified under the terms of the
 ** GNU General Public License version 2 as published by the Free Software
 ** Foundation and appearing in the file LICENSE.GPL included in the
 ** packaging of this file.
 **
 ** Licensees holding valid Qt Enterprise Edition or Qt Professional Edition
 ** licenses may use this file in accordance with the Qt Commercial License
 ** Agreement provided with the Software.
 **
 ** This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
 ** WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
 **
 ** See http://www.trolltech.com/pricing.html or email sales@trolltech.com for
 **   information about Qt Commercial License Agreements.
 ** See http://www.trolltech.com/qpl/ for QPL licensing information.
 ** See http://www.trolltech.com/gpl/ for GPL licensing information.
 **
 ** Contact info@trolltech.com if any conditions of this licensing are
 ** not clear to you.
 **
 ** Modified by BJDC, Motorola 
 **
 **********************************************************************/
  
// Revision History:
//                             Modification     Tracking
// Author (core ID)                Date          Number     Description of Changes
// -------------------------   ------------    ----------   --------------------------------------
// Chu Yangqing/w20080         12/10/2002     LIBbbXXXXX    Ported from Qt 3.0
// Li Changzhi/e3831c          06/12/2006     Libii54929    Liscence Modified


#ifndef QUUID_H
#define QUUID_H

#ifndef __cplusplus
#error "This is a C++ header file; it requires C++ to compile."
#endif

#ifndef QT_H
#include <qstring.h>
#endif // QT_H

#include <string.h>
#include <memory.h>
#include <qdatastream.h>

/**
 * The QUuid class defines a Universally Unique Identifier (UUID).
 *
 * For objects or declarations that need to be identified uniquely,
 * UUIDs (also known as GUIDs) are used widely in order to assign a
 * fixed value to compare with other objects'.
 * The 128-bit value of a UUID is generated by an algorithm that
 * guarantees the value is unique.

 * In Qt, UUIDs are wrapped by the QUuid structure which provides convenient
 * functions for handling UUIDs. Most platforms provide a tool to generate
 * new UUIDs, such as uuidgen and guidgen.
 */
struct QUuid
{
    /**
     * Create the null UUID {00000000-0000-0000-0000-000000000000}.
     */
    QUuid()
        {
            memset( this, 0, sizeof(QUuid) );
        }

    /**
     * Create a UUID with the value which is specified by the parameters
     *
     * @param l, w1, w2, b1, b2, b3, b4, b5, b6, b7, b8 the parameters specified to
     * create a UUID
     *
     * @code
     * // {67C8770B-44F1-410A-AB9A-F9B5446F13EE}
     * QUuid IID_MyInterface( 0x67c8770b, 0x44f1, 0x410a, 0xab, 0x9a, 0xf9,
     * 0xb5, 0x44, 0x6f, 0x13, 0xee )
     * @endcode
     */   
    QUuid( ulong l, ushort w1, ushort w2, uchar b1, uchar b2,
           uchar b3, uchar b4, uchar b5, uchar b6, uchar b7, uchar b8 )
        {
            data1 = l;
            data2 = w1;
            data3 = w2;
            data4[0] = b1;
            data4[1] = b2;
            data4[2] = b3;
            data4[3] = b4;
            data4[4] = b5;
            data4[5] = b6;
            data4[6] = b7;
            data4[7] = b8;
        }
    
    /**
     * Create a UUID which copys uuid
     *
     * @param uuid the QUuid will be copied.
     */
    QUuid( const QUuid &uuid )
        {
            memcpy( this, &uuid, sizeof(QUuid) );
        }
    
#ifndef QT_NO_QUUID_STRING
    /**
     * Create a UUID from a string
     *
     * @param str the string to create a UUID.
     */
    QUuid( const QString & );

    /**
     * Get a UUID in QString format
     *
     * @retval a UUID in QString format
     */
    QString toString() const;
    
    /**
     * Get a UUID in QString format
     *
     * @retval a UUID in QString format
     */
    operator QString() const { return toString(); }
#endif
    
    /**
     * Judge if it is a null UUID
     *
     * @retval TRUE if this is the null UUID {00000000-0000-0000-0000-000000000000};
     * otherwise return FALSE.
     */
    bool isNull() const;

    /**
     * Assigns the value of uuid to this QUuid object.
     *
     * @param orig the original QUuid
     *
     * @retval the new QUuid which has the same UUID as the original QUuid
     */
    QUuid &operator=(const QUuid &orig )
        {
            if (this != &orig)
            {
                memcpy( this, &orig, sizeof(QUuid) );
            }
            return *this;
        }

    /**
     * Compare two QUuid
     *
     * @param orig the QUuid is compared
     * 
     * @retval TRUE if this QUuid and the other QUuid are identical;
     * otherwise return FALSE.
     */
    bool operator==(const QUuid &orig ) const
        {
            uint i;
            if ( data1 != orig.data1 || data2 != orig.data2 ||
                 data3 != orig.data3 )
                return FALSE;

            for( i = 0; i < 8; i++ )
                if ( data4[i] != orig.data4[i] )
                    return FALSE;

            return TRUE;
        }

    /**
     * Compare two QUuid
     *
     * @param orig the QUuid is compared
     * 
     * @retval TRUE if this QUuid and the other QUuid are different;
     * otherwise return FALSE.
     */
    bool operator!=(const QUuid &orig ) const
        {
            return !( *this == orig );
        }

    ulong   data1;
    ushort  data2;
    ushort  data3;
    uchar   data4[ 8 ];
};

/**
 * Read uuid from the stream s into quuid.
 *
 * @param s [in] the stream the QUuid is to be read
 * @param quuid [out] the QUuid is read from stream 
 *
 * @retval the stream the QUuid is read
 */
QDataStream &  operator>> (QDataStream & s,  QUuid & quuid);

/**
 * Write the uuid quuid to the datastream s.
 *
 * @param s [out] the stream the QUuid is to be written to
 * @param quuid [in] the QUuid is to be written to the stream
 *
 * @retval the stream the QUuid is written
 */
QDataStream &  operator<< (QDataStream & s, const QUuid & quuid);

#endif //QUUID_H
